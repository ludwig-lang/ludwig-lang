module.exports = `
[= null [[\\[]]]]
[= null? [\\[x] [== x null]]]
[= zero [num \`0\`]]
[= one [num \`1\`]]
[= two [num \`2\`]]
[= pi [num \`3.141592653589793\`]]
[= true [<= one two]]
[= false [<= two one]]
[= bool? [\\[x]
  [|| [== x true] [\\[] [== x false]]]
]]
[= newline \`
\` ]
[= println [\\ [x] [print x] [print newline]]]
[= on [\\[cond then]
  [if cond then [\\[]]]
]]
[= && [\\[a b]
  [if a b [\\[] false]]
]]
[= || [\\[a b]
  [if a [\\[] a] b]
]]
[= == [\\ [x y] [&& [<= x y] [\\ [] [<= y x]]]]]
[= != [\\ [x y] [! [== x y]]]]
[= < [\\ [x y] [&& [<= x y] [\\ [] [! [>= x y]]]]]]
[= > [\\ [x y] [< y x]]]
[= >= [\\ [x y] [<= y x]]]
[= get [\\[var] [var \`get\`]]]
[= let [\\[var value] [[var \`let\`] value]]]
[= += [\\[var value] [let var [+ [get var] value]]]]
[= ++ [\\[v] [+= v one]]]
[= -= [\\[var value] [let var [- [get var] value]]]]
[= -- [\\[v] [-= v one]]]


[= map [\\ [fn seq] 
  [\\[c] [seq [compose c fn]]]
]]    
[= filter [\\ [pred seq] 
  [\\[c] 
    [seq [\\[x] 
       [on [pred x] [\\[] [c x]]]
  ]]]
]]
[= first [\\ [gen] [at zero gen]]]
[= assert [\\[condition] [on [! condition] [\\ [] [throw \`Assertion error\`]]]]]
[= test [\\ [title body]
  [print title]
  [catch 
    [\\[]
      [body]
      [println \` - Ok\`]
    ]
    [\\[e]
      [println \` - Failed\`]  
    ]
  ] 
]]
[= export [\\[symbols]
    [record [ \\[c] [symbols [\\[s]
        [c s]
        [c [inspect s]]
    ]]]]
]]
`