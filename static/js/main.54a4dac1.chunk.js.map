{"version":3,"sources":["../node_modules/sync-rpc/lib sync","../node_modules/ludwig-lang sync","README.md","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","closeChars","Map","ReactDOM","render","style","width","margin","useState","children","trim","setCode","results","setResults","error","setError","idle","setIdle","input","defaultValue","readOnly","fontFamily","resize","spellCheck","rows","match","length","onChange","target","value","text","adjustedHeight","clientHeight","Math","max","scrollHeight","min","height","onInput","pos","selectionStart","val","char","slice","closeChar","get","splice","join","selectionEnd","output","cols","position","type","disabled","right","top","onClick","env","ludwig","println","x","setTimeout","res","eval","savedToStr","Function","prototype","toString","undefined","message","color","document","getElementById"],"mappings":"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","file":"static/js/main.54a4dac1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 55;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 65;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`The Ludwig Programming Language`}</h1>\n    <p>{`Ludwig is a minimalistic high-level multi-paradigm dynamically-typed programming language\nwith a super-simple but human-friendly syntax.`}</p>\n    <p>{`The aim of this project is to explore a possibility of building a practically usable and human-friendly programming language\nusing the fewest number of language constructs.`}</p>\n    <p>{`Ludwig is named after Ludwig Wittgenstein, a prominent Austrian-British philosopher who worked in the fields of philosophy of\nmathematics and philosophy of language.`}</p>\n    <p>{`We believe that after its run-time library and tooling mature, Ludwig can be used as a primary language for writing all kinds\nof software, from simple scripts to server-side applications.\nBesides that, the extreme simplicity of the language opens the way for other types of use:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`as a portable target \"back-end\" language for translation from other languages`}</li>\n      <li parentName=\"ul\">{`as an educational language, both for the ease of learning and the simplicity of implementation`}</li>\n      <li parentName=\"ul\">{`as an embedded low-code/rule language`}</li>\n      <li parentName=\"ul\">{`in genetic programming research and applications`}</li>\n      <li parentName=\"ul\">{`as an intermediate representation for static analysis and optimization algorithms`}</li>\n    </ul>\n    <p>{`Ludwig doesn't have and doesn't need special syntax for such basic constructs as `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`for`}</inlineCode>{` statements,\nmodule imports, visibility modifiers, object instantiation, visibility modifiers, and even numerical or boolean literals!\nNonetheless, it does support all the aforementioned features in a very consistent and easy to grasp manner.\nBasically, instead of having a fixed set of hard-coded constructs such as the `}<inlineCode parentName=\"p\">{`if-then-else`}</inlineCode>{` statement, Ludwig allows you to\ndefine new control structures as regular functions. The same can be done in Lisp, but Ludwig achieves it without\nusing Lisp macros or any similar metaprogramming technique\nand has just two special forms comparing to more than 25 in most LISP realizations.`}</p>\n    <p>{`The reference implementation of Ludwig interpreter is written in Java Script and can be used in both NodeJS and browser applications .\nDue to the simplicity of the language, implementing an interpreter or a compiler in other languages including Ludwig itself\nshould be an easy task. `}</p>\n    <p>{`Ludwig contains 0.00% syntax sugar. This means that programs written in Ludwig are typically longer than equivalent programs\nwritten in other dynamic languages such as Python, JavaScript or LISP using various flavors of syntax sugar to provide\nshortcuts to common operations. As with Lisp's parentheses, some people may find ubiquitous square brackets in Ludwig code\nannoying and distracting. With its extremely simple and regular (even comparing to Lisp's) syntax, Ludwig is a great\ncandidate for experiments with non-textual structural or projectional editing approaches. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[println \\`Hello world\\`]\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, {useState} from 'react'\nimport {MDXProvider} from '@mdx-js/react'\nimport ReactDOM from 'react-dom';\nimport './index.css'\n/* eslint-disable */\nimport Content from '!babel-loader!@mdx-js/loader!./README.md'\nimport ludwig from 'ludwig-lang'\n\nconst closeChars = new Map([\n    ['`', '`'],\n    ['[', ']']\n]);\n\nfunction LudwigSnippet(props) {\n    const [code, setCode] = useState(props.children.trim())\n    const [results, setResults] = useState()\n    const [error, setError] = useState('')\n    const [idle, setIdle] = useState(true)\n\n\n    const input = <textarea defaultValue={code}\n                            readOnly={!idle}\n                            style={{fontFamily: 'Monospace', width: '100%', resize: 'none'}}\n                            spellCheck={false}\n                            rows={(code.match(/[^\\r\\n]+/g) || []).length + 1}\n                            onChange={e => {\n                                setCode(e.target.value)\n                                const text = e.target\n                                const maxHeight = 400\n                                let adjustedHeight = text.clientHeight;\n                                if (!maxHeight || maxHeight > adjustedHeight) {\n                                    adjustedHeight = Math.max(text.scrollHeight, adjustedHeight);\n                                    if (maxHeight)\n                                        adjustedHeight = Math.min(text.scrollHeight, adjustedHeight);\n                                    if (adjustedHeight > text.clientHeight)\n                                        text.style.height = adjustedHeight + \"px\";\n                                }\n                            }}\n                            onInput={e => {\n                                const pos = e.target.selectionStart;\n                                const val = [...e.target.value];\n\n                                const char = val.slice(pos - 1, pos)[0];\n                                const closeChar = closeChars.get(char);\n\n                                if (closeChar) {\n                                    val.splice(pos, 0, closeChar);\n                                    e.target.value = val.join('');\n                                    e.target.selectionEnd = pos;\n                                }\n                            }\n                            }\n    />\n\n    const output = results && <textarea readOnly\n                                   rows={results.match(/[^\\r\\n]+/g).length + 1}\n                                   cols=\"80\"\n                                   style={{fontFamily: 'Monospace', resize: 'none', width: '100%'}}\n                                   value={results}/>\n\n\n\n    function execute() {\n        let output = ''\n        const env = ludwig.env()\n        env.println = x => {\n            output += `${x}\\n`\n        }\n        setResults('')\n        setError('')\n        setIdle(false)\n\n        setTimeout(() => {\n            try {\n                const res = ludwig.eval(code, '', env)\n                const savedToStr = Function.prototype.toString\n                Function.prototype.toString = () => 'λ'\n                try {\n                    setResults(output + ((res !== null && res !== undefined) ? res + '' : ''))\n                } finally {\n                    Function.prototype.toString = savedToStr\n                }\n            } catch (e) {\n                setError(e.message)\n            } finally {\n                setIdle(true)\n            }\n        }, 0)\n\n    }\n\n    return (\n        <p>\n            <div style={{position: 'relative'}}>\n                {input}\n                <button type=\"button\" disabled={!idle} style={{position: 'absolute', right: '0px', top: '0px'}}\n                        onClick={execute}>Run\n                </button>\n            </div>\n            {results && <p>{output}</p>}\n            {error && <p style={{color: 'red'}}>{error}</p>}\n        </p>\n    )\n}\n\nReactDOM.render(\n    <div style={{width: '80%', margin: 'auto'}}>\n        <MDXProvider components={{code: LudwigSnippet}}>\n            <Content/>\n        </MDXProvider>\n    </div>\n    ,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}