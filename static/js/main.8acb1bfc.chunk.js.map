{"version":3,"sources":["../node_modules/sync-rpc/lib sync","../node_modules/ludwig-lang/src sync","index.md","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","closeChars","Map","highlight","source","tokens","ludwig","tokenize","level","map","t","type","value","trim","length","startsWith","endsWith","tokenType","s","replace","escapeHtml","join","ReactDOM","render","style","width","margin","useState","children","setCode","results","setResults","error","setError","idle","setIdle","language","className","input","readOnly","onValueChange","onKeyPress","pos","target","selectionStart","val","char","key","closeChar","get","splice","selectionEnd","output","rows","Math","min","match","cols","fontFamily","resize","color","position","disabled","right","top","onClick","env","str","println","x","print","setTimeout","res","eval","undefined","message","document","getElementById"],"mappings":"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","file":"static/js/main.8acb1bfc.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 61;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 71;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`The Ludwig Programming Language`}</h1>\n    <p><em parentName=\"p\">{`For the clarity we are aiming at is indeed complete clarity. Ludwig Wittgenstein`}</em></p>\n    <p><strong parentName=\"p\">{`All code samples in this document can be executed and edited directly in the browser.\nPlease check out `}<a parentName=\"strong\" {...{\n          \"href\": \"https://ludwig-lang.github.io/ludwig-lang/\"\n        }}>{`an interactive version`}</a>{` of this page.`}</strong></p>\n    <p>{`Ludwig is a high-level multi-paradigm dynamically-typed programming language\nwith a super-simple but human-friendly syntax. It's built upon a minimalistic set of basic concepts,\nbut naturally expands `}<em parentName=\"p\">{`ad inifinitum`}</em>{` like a seed becomes a tree.\nIt seamlessly unifies functional and object-oriented styles of programming,\nencourages single assignment immutability but permits mutable state when necessary,\nsupports lazy evaluation and tail recursion, and provides a uniform API for both \"fluent\" generators and materialized persistent data structures. `}</p>\n    <p>{`The aim of this project is to explore a possibility of building a practically usable and human-friendly programming language\nusing the fewest number of language constructs.`}</p>\n    <p>{`Ludwig is named after Ludwig Wittgenstein, a prominent Austrian-British philosopher who worked in the fields of philosophy of\nmathematics and philosophy of language. Many of the ideas realized in Ludwig come from such programming languages like Lisp, Smalltalk,\nRebol and Red, but it was no less inspired by the dizzying passion for simplicity and clarity which can be found in the works of Ludwig Wittgenstein.`}</p>\n    <p>{`We believe that after its run-time library and tooling mature, Ludwig can be used as a primary language for writing all kinds\nof software, from simple scripts to server-side applications.\nBesides that, the extreme simplicity of the language opens the way for other types of use:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`as a portable target \"back-end\" language for translation from other languages`}</li>\n      <li parentName=\"ul\">{`as an educational language, both for the ease of learning and the simplicity of implementation`}</li>\n      <li parentName=\"ul\">{`as an embedded low-code/rule language`}</li>\n      <li parentName=\"ul\">{`in genetic programming research and applications`}</li>\n      <li parentName=\"ul\">{`as an intermediate representation for static analysis and optimization algorithms`}</li>\n    </ul>\n    <p>{`Ludwig doesn't have and doesn't need special syntax for such basic constructs as `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`for`}</inlineCode>{` statements,\nmodule imports, visibility modifiers, object instantiation, visibility modifiers, and even numerical or boolean literals!\nNonetheless, it does support all the aforementioned features in a very consistent and easy to grasp manner.\nBasically, instead of having a fixed set of hard-coded constructs such as the `}<inlineCode parentName=\"p\">{`if-then-else`}</inlineCode>{` statement, Ludwig allows you to\ndefine new control structures as regular functions. The same can be done in LISP, but Ludwig achieves it without\nusing LISP macros or any similar metaprogramming technique\nand has just two special forms comparing to more than 25 in most LISP realizations.`}</p>\n    <p>{`The reference implementation of Ludwig interpreter is written in Java Script and can be used in both NodeJS and browser applications.\nDue to the simplicity of the language, implementation of an interpreter or a compiler in other languages including Ludwig itself\nshould be an easy task. `}</p>\n    <p>{`Ludwig contains 0.00% syntax sugar. It means that some Ludwig constructs may look slightly more complex than their equivalents\nin other languages such as Python, JavaScript or LISP using various flavors of syntax sugar to provide\nshortcuts to common patterns. On the other hand, Ludwig programs can be much more compact and easier to understand than analogous programs written in\nsuch Baroque languages as Java. Just compare \"Hello world\" written in Ludwig`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ludwig\"\n      }}>{`[println \\`Hello, world\\`]\n`}</code></pre>\n    <p>{`with its Java equivalent:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package com.example;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, world\");\n  }\n}\n`}</code></pre>\n    <p>{`As with LISP's parentheses, some people may find ubiquitous square brackets in Ludwig code\nannoying and distracting. With its extremely simple and regular (even comparing to Lisp's) syntax, Ludwig is a great\ncandidate for experiments with non-textual structural or projectional editing approaches. `}</p>\n    <h2>{`The syntax`}</h2>\n    <p>{`I promise you, it will take you no longer than 5 minutes to learn the full syntax. Let's start with something very simple.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Our very first program\n[println \\`Hello, World\\`]\n`}</code></pre>\n    <p>{`The first line contains a comment starting with `}<inlineCode parentName=\"p\">{`#`}</inlineCode>{`.`}</p>\n    <p>{`The second calls the standard function `}<inlineCode parentName=\"p\">{`println`}</inlineCode>{` passing the string literal `}<inlineCode parentName=\"p\">{`Hello, World`}</inlineCode>{` as an argument.\nThe syntax `}<inlineCode parentName=\"p\">{`[function arg1 arg2...]`}</inlineCode>{` used for function invocation is similar to LISP's S-expressions.\nLudwig uses square brackets instead of LISP's parentheses for two reasons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`to make it visually distinguishable from LISP`}</li>\n      <li parentName=\"ul\">{`for the ease of typing. On most keyboards you need to actually press `}<inlineCode parentName=\"li\">{`Shift-(`}</inlineCode>{` to type a parenthesis\nand just `}<inlineCode parentName=\"li\">{`[`}</inlineCode>{` for a bracket.`}</li>\n    </ul>\n    <p>{`String literals are surrounded with backquotes.    `}</p>\n    <p>{`Let's now consider a slightly more complex example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Let's define a function first\n[= hello [\\\\ [name] \n  [print \\`Hello, \\`]\n  [println name]\n]]\n\n[hello \\`World\\`]\n`}</code></pre>\n    <p>{`It defines a new function, `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` with a single argument, `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`\n(strictly speaking, it binds symbol `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` to an anonymous lambda-function).\nThe syntax `}<inlineCode parentName=\"p\">{`[= symbol value]`}</inlineCode>{` is used for all assignments.\nAll symbols in Ludwig are constants, so you cannot redefine one, but some of them may have mutable \"inner\" state.`}</p>\n    <p>{`The function body in enclosed with square brackets and consists of the special symbol `}<inlineCode parentName=\"p\">{`\\\\`}</inlineCode>{`\nwhich stands for the Greek letter λ `}<em parentName=\"p\">{`\"Lambda\"`}</em>{`, a list of arguments (just one in our case) enclosed with brackets,\nand the function's body, consisting in our case of two expressions,\none printing the word `}<inlineCode parentName=\"p\">{`Hello`}</inlineCode>{`, another printing the argument `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`.`}</p>\n    <p>{`The formal syntax for a λ-function is `}<inlineCode parentName=\"p\">{`[\\\\ [argument*] expression*]`}</inlineCode>{`.\nThe result of a λ-function is produced by the last expression of its body.\nEach expression in the body can be a symbol, a string literal, an assignment, a function invocation or a nested λ-function literal.`}</p>\n    <p>{`Finally, we call the newly defined function, passing `}<inlineCode parentName=\"p\">{`World`}</inlineCode>{` as an argument.`}</p>\n    <p>{`Congratulations! At this point You've learned Ludwig's syntax in full.\nThe example above contains all the possible Ludwig syntax constructs.\nYes, again: this is everything you need to know:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`whitespace doesn't matter `}</li>\n      <li parentName=\"ul\">{`comments start with `}<inlineCode parentName=\"li\">{`#`}</inlineCode></li>\n      <li parentName=\"ul\">{`string literals should be put within `}{`\\``}{` back-quotes `}{`\\``}</li>\n      <li parentName=\"ul\">{`function invocations use \"square-bracketed\" S-expressions `}</li>\n      <li parentName=\"ul\">{`assignments have the form `}<inlineCode parentName=\"li\">{`[= symbol value ]`}</inlineCode></li>\n      <li parentName=\"ul\">{`anonymous functions are defined using the λ-syntax: `}<inlineCode parentName=\"li\">{`[\\\\ [argument*] expression*]`}</inlineCode></li>\n      <li parentName=\"ul\">{`symbols (constants' names) can be anything that doesn't clash with the above rules`}</li>\n    </ul>\n    <p>{`Yes, Ludwig does support control structures, numbers and boolean values, mutable state, collections, objects, module imports and much more,\nbut all these features don't require any new syntax constructs.`}</p>\n    <h2>{`Types`}</h2>\n    <h3>{`Null`}</h3>\n    <p>{`The constant `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` represents a special value signifying an absence of anu other value.`}</p>\n    <p>{`A function with an empty body always returns `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= foo [\\\\[]]]\n\n[foo]\n`}</code></pre>\n    <h3>{`Strings`}</h3>\n    <p>{`Strings literals can contain single and double quotes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`It's a \"good\" string\\`\n`}</code></pre>\n    <p>{`Multi-line strings:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`A\nmultiline\nstring\\`\n`}</code></pre>\n    <p>{`An empty string literal:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\n`}</code></pre>\n    <h3>{`Booleans`}</h3>\n    <h4>{`The \"if\" function`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`[if true \n  [\\\\ [] [println \\`It's true\\`]]\n  [\\\\ [] [println \\`It's not true\\`]]\n]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`[if false \n  [\\\\ [] [println \\`It's true\\`]]\n  [\\\\ [] [println \\`It's not true\\`]]\n]\n`}</code></pre>\n    <p>{`Chained if:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= sign [\\\\[x]\n    [if [< x zero] \n        [\\\\[] [~ one]]\n        [\\\\[] [if [> x zero]\n                 [\\\\[] one]\n                 [\\\\[] zero]\n        ]]\n    ]\n]]\n\n[println [sign [num \\`-100\\`]]]\n[println [sign [num \\`0\\`]]]\n[println [sign [num \\`0.0001\\`]]]\n`}</code></pre>\n    <h3>{`Numbers`}</h3>\n    <p>{`Numbers are first-class objects in Ludwig. However, there is no support for numeric literals in Ludwig's syntax.\nInstead, Ludwig provides a few functions for `}<em parentName=\"p\">{`parsing`}</em>{` strings into numbers. The most commonly used parsing function is `}<inlineCode parentName=\"p\">{`num`}</inlineCode>{`\nwhich parses a number from its decimal representation. `}</p>\n    <p>{`Valid number formats:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[println [num \\`123.45\\`]]\n[println [num \\`+123.45\\`]]\n[println [num \\`1.2345E2\\`]]\n[println [num \\`1.2345e+2\\`]]\n[println [num \\`1_000_000_000\\`]]\n[println [num \\`NaN\\`]]\n[println [num \\`Infinity\\`]]\n[println [num \\`-Infinity\\`]]\n`}</code></pre>\n    <p>{`This may seem awful at a first glance but this approach has in fact a number of advantages over syntax-level support for numeric literal.\nFirst of all, the fact that the core syntax of the language remains very simple makes it simple to create all kinds of tools\nlike IDE plugins or code highlighters for the language.\nFinally, most developers actually very rarely need to declare a numeric constant. Most numbers come from IO and require parsing anyway.\nMost hardcoded constants in a typical codebase are small integer numbers 0, 1, 2. Ludwig defines those numbers as named constants:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[println zero]\n[println one]\n[println two]\n`}</code></pre>\n    <p>{`Arithmetic operations:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= x [num \\`7\\`]]\n[= y [num \\`3\\`]]\n[println [+ x y]]\n[println [- x y]]\n[println [* x y]]\n[println [/ x y]]\n[println [^ x y]]\n# modulo\n[println [mod x y]]\n[println [mod y x]]\n# integer division\n[println [div x y]]\n[println [div y x]]\n# negation\n[println [~ x]]\n`}</code></pre>\n    <p>{`Unlike LISP where you can sum multiple numbers at once, e.g. `}<inlineCode parentName=\"p\">{`(+ 1 2 3 4)`}</inlineCode>{`, in Ludwig all binary arithmetic operators take exactly two arguments.\nLudwig also uses separate symbols for subtraction (`}<inlineCode parentName=\"p\">{`~`}</inlineCode>{`) and unary negation (`}<inlineCode parentName=\"p\">{`~`}</inlineCode>{`).`}</p>\n    <h3>{`Functions`}</h3>\n    <h3>{`The anatomy of a function`}</h3>\n    <h3>{`Recursion`}</h3>\n    <h3>{`Tail recursion`}</h3>\n    <h3>{`Mutually recursive functions`}</h3>\n    <h3>{`Number of arguments`}</h3>\n    <p>{`Function `}<inlineCode parentName=\"p\">{`[arity f]`}</inlineCode>{` returns the number of arguments of function `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[println [arity [\\\\[] [print \\`booo\\`]]]]\n[println [arity +]]\n[println [arity if]]\n`}</code></pre>\n    <p>{`All Ludwig functions except to `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{` (the list constructor) have fixed number of arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# this will produce an error\n[+ one] \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# this too\n[+ one one one] \n`}</code></pre>\n    <p>{`The list constructor function `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{` can accept any number of arguments`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[println [arity ,]]\n[println [,]]\n[println [, one]]\n[println [, one two]]\n`}</code></pre>\n    <p>{`Following the philosophy of the language, we are not planning to introduce any other variadic functions bu `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{`.\nEven though variadic functions can be convenient, they also introduce unnecessary ambiguities and sometimes lead to hard-to-spot bugs.`}</p>\n    <h3>{`Tail recursion`}</h3>\n    <h3>{`Errors`}</h3>\n    <h2>{`Functions for everything`}</h2>\n    <h3>{`Variables`}</h3>\n    <p>{`As was said before, all bindings in Ludwig are static.\nOnce a symbol is assigned a value, it cannot be assigned another value in the same lexical context.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= x \\`a\\`] # okay\n[= x \\`b\\`] # this will fail\n\n`}</code></pre>\n    <p>{`This means that all bindings are immutable. That is very good for the correctness of your program, but sometimes\nyou do need mutable state. Ludwig allows for mutability by providing a special kind of container primitive which internal\nstate can be mutated. These containers are quite naturally called \"variables\" or \"vars\".`}</p>\n    <p>{`While it's possible to create other high-level mutable objects `}<strong parentName=\"p\">{`using`}</strong>{` `}<em parentName=\"p\">{`var`}</em>{` objects, they are the only primitives\nallowing for mutability.\nA variable object can be created using `}<inlineCode parentName=\"p\">{`[var initial-value]`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= x [var zero]]\n`}</code></pre>\n    <p>{`The value of a variable can be retrieved using `}<inlineCode parentName=\"p\">{`let`}</inlineCode>{` function and modified using `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= x [var one]]\n[println [get x]]\n[let x two] \n[println [get x]]\n`}</code></pre>\n    <p>{`Variables containing numerical values can be incremeted or decremented:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= x [var zero]]\n[++ x]\n[println [get x]]\n[-- x] \n[println [get x]]\n`}</code></pre>\n    <p>{`Variables can be used to create \"stateful functions\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= counter [var zero]]\n[= next_id [\\\\[] [++ counter]]]\n\n[println [next_id]]\n[println [next_id]]\n[println [next_id]]\n`}</code></pre>\n    <p>{`The example above works fine, but what if we want to hide (encapsulate) its internal state?\nThe old wrapping trick does just that: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= next_id [[\\\\[]  \n  [= counter [var zero]]  \n  [\\\\[] [++ counter]]\n]]]\n  \n\n[println [next_id]]\n[println [next_id]]\n[println [next_id]]\n`}</code></pre>\n    <h3>{`Generators`}</h3>\n    <p>{`Ludwig's approach to iterables, generators, sequences, collections or how you name them is different from other programming languages.\nA generator is simply a function which takes another single-argument function as an argument.\nWe call the second function `}<em parentName=\"p\">{`consumer`}</em>{`.\nThe generator may call the consumer an arbitrary (finite or infinite) number of times, feeding the consumer with values\n(yielding values).`}</p>\n    <p>{`A generator that yields three values:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= generator [\\\\[consumer]\n  [consumer zero]\n  [consumer one]\n  [consumer two]\n]]\n\n# We pass println as a consumer\n[generator println]\n`}</code></pre>\n    <p>{`A generator that yields 20 values:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= generator [\\\\[consumer]\n  [= i [var zero]]\n  [= iter [\\\\ []\n    [println [get i]]\n    [on [< [++ i] [num \\`20\\`]]\n      iter\n    ]\n  ]]\n  [iter]\n]]\n\n[generator println]\n`}</code></pre>\n    <p>{`A generator that yields nothing:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= generator [\\\\[consumer]\n]]\n\n# Will print nothing\n[generator println]\n`}</code></pre>\n    <h3>{`Lists`}</h3>\n    <p>{`Lists are materialized generators which store values in memory instead of calculating them on every call.\nThe easiest way to create a list is by using the list constructor function `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{`.\nIt accepts an arbitrary number of arguments and returns a generator yielding those values.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= items [, \\`a\\` \\`b\\` \\`c\\`]]\n[println items]\n[println [size items]]\n[println [at zero items]]\n[println [at one items]]\n[println [at two items]]\n[items println]\n`}</code></pre>\n    <p>{`An empty list:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[,]\n`}</code></pre>\n    <p>{`Any finite fluent (non-materialized) generator can be converted into a list using `}<inlineCode parentName=\"p\">{`[list gen]`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= gen [\\\\[yield]\n    [println \\`yielding values\\`]\n    [yield zero]\n    [yield one]\n    [yield two]\n]]\n\n[= items [list gen]] # prints \\`yielding values\\`\nitems\n`}</code></pre>\n    <p>{`Be careful, if you call `}<inlineCode parentName=\"p\">{`list`}</inlineCode>{` on an infinite generator, your application will crash with out of memory error!`}</p>\n    <p>{`Again, lists are generators, are \"normal\" functions. However, list-backed generators have a number of distinctive properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`[size gen]`}</inlineCode>{` and  `}<inlineCode parentName=\"li\">{`[at index gen]`}</inlineCode>{` require constant time, O(1).`}</li>\n      <li parentName=\"ul\">{`lists have nice string representations, e.g. `}<inlineCode parentName=\"li\">{`[ 1, 2, 3 ]`}</inlineCode></li>\n      <li parentName=\"ul\">{`lists are implemented using persistent data structures, meaning that such operations as addition or deletion of list elemnts\ninvolve only limited copying `}</li>\n    </ul>\n    <h3>{`Sets`}</h3>\n    <p>{`Sets are materialized generators producing unique values.\nSimilarly to lists, sets are implemented using persistent data structures.\nEvery generator can be converted into a set using the `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` function. Please note that the order of elements\nin the resulting set may differ from their order in the original generator.\nThe `}<inlineCode parentName=\"p\">{`contains`}</inlineCode>{` function takes constant time `}<inlineCode parentName=\"p\">{`O(1)`}</inlineCode>{` for sets. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= s [set [, \\`a\\` \\`b\\` \\`c\\` \\`a\\`]]]\n[println s]\n[println [contains s \\`a\\`]]\n[println [contains s \\`d\\`]]\n\n`}</code></pre>\n    <h3>{`Records`}</h3>\n    <p>{`One can look at records from different angles. From one, they a just a convenient way to define a special kind of functions.\nLet's define a tabular function f(x) which returns 1 when x = 0, and 0 when x = 1. You cand do that using `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= f [\\\\ [x]\n  [if [== x zero]\n      [\\\\[] one]\n      [\\\\[] [if [== x one]\n               [\\\\[] zero]\n               [\\\\[] [error \\`Unexpected argument value\\`]]\n           ]\n      ]\n  ]\n]]\n\n[println [f zero]]\n[println [f one]]\n`}</code></pre>\n    <p>{`Records provide a less verbose way to achieve the same result:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= f [record [, \n  zero one\n  one zero\n]]]\n\n[println [f zero]]\n[println [f one]]\n`}</code></pre>\n    <p>{`You may call `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` a recorded function or simply a record.`}</p>\n    <p>{`This works for all kinds of argument anr result types:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= p [record [, \n  \\`x\\` one\n  \\`y\\` zero\n]]]\n\n[println p]\n[println [p \\`x\\`]]\n[println [p \\`y\\`]]\n`}</code></pre>\n    <p>{`If you're going to create more \"points\" you can create a new function for that:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= point [\\\\[x y]\n  [record [, \n    \\`x\\` x\n    \\`y\\` y\n  ]]\n]]\n\n[= p [point zero one]]\n`}</code></pre>\n    <p>{`Wait, it looks as if we've just declared a new type, `}<inlineCode parentName=\"p\">{`point`}</inlineCode>{` and then created an instance of that type!\nLet's make our point class `}<del parentName=\"p\">{`movable`}</del>{` mutable:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= point [\\\\[x y]\n  [record [, \n    \\`x\\` [var x]\n    \\`y\\` [var y]\n  ]]\n]]\n\n[= p [point zero one]]\n[let [p \\`x\\`] two]\np\n`}</code></pre>\n    <p>{`Let's add a method:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= point [\\\\[x y]\n  [= it [record [, \n    \\`x\\` [var x]\n    \\`y\\` [var y]\n    \\`dist\\` [\\\\[] \n       [sqrt [+ [* [get [it \\`x\\`]] [get [it \\`x\\`]]] \n                [* [get [it \\`y\\`]] [get [it \\`y\\`]]]]]\n    ]\n  ]]]\n]]\n\n[= p [point zero one]]\n[println [[p \\`dist\\`]]]\n[let [p \\`x\\`] [num \\`3\\`]]\n[let [p \\`y\\`] [num \\`4\\`]]\n[println [[p \\`dist\\`]]]\n`}</code></pre>\n    <p>{`We can also hide the mutable state from direct modification (encapsulate it):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`[= point [\\\\[x y]\n  [= my-x [var x]]\n  [= my-y [var y]]\n  [record [, \n    \\`x\\` [\\\\[] [get my-x]]\n    \\`y\\` [\\\\[] [get my-y]]\n    \\`dist\\` [\\\\[] \n       [sqrt [+ [* [get my-x] [get my-x]] \n                [* [get my-y] [get my-y]]]]\n    ]\n    \\`move\\` [\\\\[x y]\n       [let my-x x]\n       [let my-y y]\n     ]\n  ]]\n]]\n\n[= p [point zero one]]\n[println [[p \\`dist\\`]]]\n[[p \\`move\\`] [num \\`3\\`] [num \\`4\\`]]\n[println [[p \\`dist\\`]]]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`[= dog [\\\\[name] [record [,\n  \\`say\\` [\\\\[] \n     [print name]\n     [println \\` says bark\\`]\n  ]\n]]]]\n\n[= cat [\\\\[name] [record [,\n  \\`say\\` [\\\\[] \n     [print name]\n     [println \\` says mew\\`]\n  ]\n]]]]\n\n[= jack [dog \\`Jack\\`]]\n[= kitty [cat \\`Kitty\\`]]\n\n[= animals [, jack kitty]]\n\n[animals [\\\\[a] [[a \\`say\\`]]]]\n`}</code></pre>\n    <h3>{`Memoization`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`[= fib [memoize [\\\\[n]\n  [if [< n two]\n    [\\\\[] one]\n    [\\\\[] [+ [fib [- n two]] [fib [- n one]]]]\n  ]\n]]]\n\n[fib [num \\`100\\`]]\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, {useState} from 'react'\nimport {MDXProvider} from '@mdx-js/react'\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Editor from 'react-simple-code-editor'\nimport ludwig from 'ludwig-lang'\n/* eslint-disable */\nimport Content from '!babel-loader!@mdx-js/loader!./index.md'\n\n\nconst closeChars = new Map([\n    ['`', '`'],\n    ['[', ']']\n]);\n\nconst tokenType = value => {\n    switch (value) {\n        case '[':\n            return 'lb'\n        case ']':\n            return 'rb'\n        case '\\\\':\n            return 'lambda'\n        case '=':\n            return 'assignment'\n        default:\n            if (value.trim().length === 0) {\n                return 'ws'\n            }\n            if (value.startsWith('#')) {\n                return 'comment'\n            }\n            if (value.startsWith('`')) {\n                if (!value.endsWith('`') || value.length === 1) {\n                    return 'unterminated-string'\n                }\n                return 'string'\n            }\n            return 'symbol'\n\n    }\n}\n\nconst escapeHtml= s => s\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\")\n\nconst highlight = (source) => {\n    const tokens = ludwig.tokenize(source, false, false)\n    let level = 0\n    return tokens.map(t => {\n        let type = tokenType(t.value)\n        switch (type) {\n            case 'lb':\n                level++\n                type = 'lb-' + ((level - 1) % 4 + 1)\n                break\n            case 'rb':\n                type = 'rb-' + (level < 0 ? 0 : (level - 1) % 4 + 1)\n                level--\n                break\n        }\n        const s = `<span class=\"ludwig-${type}\">${escapeHtml(t.value)}</span>`\n        return s\n    }).join('')\n}\n\nfunction LudwigSnippet(props) {\n    const [code, setCode] = useState(props.children.trim())\n    const [results, setResults] = useState()\n    const [error, setError] = useState('')\n    const [idle, setIdle] = useState(true)\n\n    const language = props.className && props.className.replace(/language-/, '')\n    if (language && language !== 'ludwig') {\n        return <pre>{code}</pre>\n    }\n\n    const input =\n        <Editor value={code}\n                readOnly={!idle}\n                onValueChange={setCode}\n                highlight={highlight}\n                onKeyPress={e => {\n                    const pos = e.target.selectionStart;\n                    const val = [...e.target.value];\n\n                    const char = e.key;\n                    const closeChar = closeChars.get(char);\n\n                    if (closeChar) {\n                        val.splice(pos, 0, closeChar);\n                        e.target.value = val.join('');\n                        e.target.selectionEnd = pos;\n                    }\n                }\n                }\n        />\n\n    const output = results && <textarea readOnly\n                                        rows={Math.min(results.match(/[^\\r\\n]+/g).length + 1, 20)}\n                                        cols=\"80\"\n                                        style={{\n                                            fontFamily: 'Monospace',\n                                            resize: 'none',\n                                            width: '100%',\n                                            'background-color': 'black',\n                                            color: 'white'\n                                        }}\n                                        value={results}/>\n\n    function execute() {\n        let output = ''\n        const env = ludwig.env()\n        const {str} = env\n        env.println = x => {\n            output += `${x}\\n`\n        }\n        env.print = x => {\n            output += x + ''\n        }\n        setResults('')\n        setError('')\n        setIdle(false)\n\n        setTimeout(() => {\n            try {\n                const res = ludwig.eval(code, '', env)\n                setResults(output + ((res !== null && res !== undefined) ? str(res) : ''))\n            } catch (e) {\n                setError(e.message)\n            } finally {\n                setIdle(true)\n            }\n        }, 0)\n    }\n\n    return (\n        <p>\n            <div style={{position: 'relative'}}>\n                {input}\n                <button type=\"button\" disabled={!idle} style={{position: 'absolute', right: '0px', top: '0px'}}\n                        onClick={execute}>▶️Run️\n                </button>\n            </div>\n            {results && <p>{output}</p>}\n            {error && <p style={{color: 'red'}}>{error}</p>}\n        </p>\n    )\n}\n\nReactDOM.render(\n    <div style={{width: '80%', margin: 'auto'}}>\n        <MDXProvider components={{code: LudwigSnippet}}>\n            <Content/>\n        </MDXProvider>\n    </div>\n    ,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}